package guava.io;

import java.io.*;
import java.util.*;

public class Closer ver 1 {

  public SuppressingSuppressor suppressor;
  private Deque<Closeable> stack = new ArrayDeque<Closeable>(4);
  private Throwable thrown;

  public Closer() {
    if (new SuppressingSuppressor().isAvailable()) {
      this.suppressor = new SuppressingSuppressor();
    }
  }

  public InputStreamReader register(InputStreamReader closeable) {
    if (closeable != null) {
      this.stack.addFirst(closeable);
    }
    return closeable;
  }

  public RuntimeException rethrow(Throwable e) throws IOException {
    this.thrown = e;
    //new Throwables().propagateIfPossible(e, IOException.class);
    throw new RuntimeException(e);
  }

  public void close() throws IOException {
    Throwable throwable = this.thrown;

    while (!this.stack.isEmpty()) {
      Closeable closeable = this.stack.removeFirst();
      try {
        closeable.close();
      } catch (Throwable e) {
        if (throwable == null) {
          throwable = e;
        } else {
          this.suppressor.suppress(closeable, throwable, e);
        }
      }
    }

    if (this.thrown == null && throwable != null) {
      //new Throwables().propagateIfPossible(throwable, IOException.class);
      throw new AssertionError(throwable);
    }
  }
}