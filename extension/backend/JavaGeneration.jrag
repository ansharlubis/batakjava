aspect SingleSolutionGeneration {

  syn nta CompilationUnit CompilationUnit.genJava(Map<Integer,TypeDecl> sol) {
    List<ImportDecl> imports = new List();
    for (ImportDecl imp: getImportDeclList()) {
      imports = imports.addAll(imp.genImport(sol));
    }

    List<TypeDecl> types = new List();
    for (TypeDecl type: getTypeDeclList()) {
      types = types.add(type.genType(sol, imports));
    }

    CompilationUnit newUnit = new CompilationUnit(getPackageDecl(), imports, types);
    newUnit.setFromSource(true);
    newUnit.setClassSource(getClassSource());

    return newUnit;
  }

  /** Import declarations **/
  syn nta List<ImportDecl> ImportDecl.genImport(Map<Integer,TypeDecl> sol) = new List().add(treeCopy());

  eq SingleTypeImportDecl.genImport(Map<Integer,TypeDecl> sol) {
    List<ImportDecl> imports = new List();
    SimpleSet<String> addedTypes = emptySet();
    for (TypeDecl type: getAccess().typeSet()) {
      for (Integer infType: sol.keySet()) {
        if (type == sol.get(infType)) {
          if (type.version() != null) {
            if (!addedTypes.contains(type.compiledName(sol))) {
              imports = imports.add(
                new SingleTypeImportDecl(getAccess().genImportAccess(type, sol)));
              addedTypes = addedTypes.add(type.compiledName(sol));
            }
          } else {
            imports = imports.add(new SingleTypeImportDecl(getAccess().treeCopy()));
          }
        }
      }
    }
    return imports;
  }

  /** Type declarations **/
  syn nta TypeDecl TypeDecl.genType(Map<Integer,TypeDecl> sol, List<ImportDecl> imports) = treeCopy();

  eq VersionClassDecl.genType(Map<Integer,TypeDecl> sol, List<ImportDecl> imports) {
    List<TypeDecl> overviews = new List();

    String className = compiledName(sol);
    Opt<Access> superAccess = hasSuperClass() ? new Opt(getSuperClass().genAccess(sol)) : new Opt();

    List<BodyDecl> bodies = new List();
    for (BodyDecl body: getBodyDeclList()) {
      bodies = bodies.addAll(body.genBodies(sol));
    }    

    TypeDecl type = new ClassDecl(getModifiers(), className, superAccess, getImplementsList(), bodies);

    TypeDecl compiled = program().lookupLibraryType(packageName(), getID());
    if (compiled.isUnknown()) {
      TypeDecl compiling = program().updateCompilingOverview(packageName(), getID());
      if (compiling.isUnknown()) {
        overviews = overviews.add(genOverview(type.name()));
      } else {
        overviews = overviews.add(updateOverview(compiling, type.name()));
      }
    } else {
      overviews = overviews.add(updateOverview(compiled, type.name()));
    }

    CompilationUnit unit = new CompilationUnit(compilationUnit().getPackageDecl(), imports, overviews);
    unit.setFromSource(true);
    unit.setClassSource(compilationUnit().getClassSource());
    program().genOverview.add(unit);

    return type;
  }

  syn nta List<BodyDecl> BodyDecl.genBodies(Map<Integer,TypeDecl> sol) = new List().add(treeCopy());

  eq FieldDecl.genBodies(Map<Integer,TypeDecl> sol) {
    List<BodyDecl> bodies = new List();
    for (FieldDeclarator decl: getDeclaratorList()) {
      bodies = bodies.add(
        new FieldDecl(getModifiers(), getTypeAccess().genAccess(sol), new List().add(decl.genDeclarator(sol))));
    }
    return bodies;
  }

  eq ConstructorDecl.genBodies(Map<Integer,TypeDecl> sol) {
    List<ParameterDeclaration> params = new List();
    for (ParameterDeclaration param: getParameterList()) {
      params = params.add(param.genParameter(sol));
    }

    Opt<Stmt> parsed = hasParsedConstructorInvocation()
      ? new Opt(getParsedConstructorInvocation().genStmt(sol)) : new Opt();

    return new List().add(new ConstructorDecl(
      getModifiers(), ((ClassDecl) hostType()).compiledName(sol), params,
      getExceptionList(), parsed, getBlock().genBlock(sol)
    ));
  }

  eq MethodDecl.genBodies(Map<Integer,TypeDecl> sol) {
    List<BodyDecl> bodies = new List();

    if (varListSet.size() > 0) {
      java.util.Set<java.util.List<TypeDecl>> generatedSignature = new HashSet(varListSet.size());
      for (java.util.List<Integer> varList: varListSet) {
        java.util.List<TypeDecl> varTypeList = new ArrayList(varList.size());
        for (Integer var: varList) {
          varTypeList.add(sol.get(var));
        }
        if (!generatedSignature.contains(varTypeList)) {
          generatedSignature.add(varTypeList);

          List<ParameterDeclaration> params = new List();
          for (int i = 0; i < getNumParameter(); i++) {
            params = params.add(getParameter(i).genParameter(sol, varList.get(i)));
          }

          Access returnAccess = getTypeAccess().genAccess(sol, varList.get(varList.size()-1));

          String methodName = getID();
          TypeDecl returnType = sol.get(varList.get(varList.size()-1));
          if (returnType.isCompiled()) {
            methodName += "$" + returnType.name();
          } else if (returnType.isUncompiled()) {
            methodName += "$" + returnType.compiledName(sol);
          }

          bodies = bodies.add(new MethodDecl(getModifiers(), returnAccess, methodName, params,
            getExceptionList(), hasBlock() ? new Opt(getBlock().genBlock(sol)) : new Opt()));
        }
      }
    } else {
      List<ParameterDeclaration> params = new List();
      for (ParameterDeclaration param: getParameterList()) {
        params = params.add(param.genParameter(sol));
      }

      String methodName = getID();
      TypeDecl returnType = sol.get(getTypeAccess().infVar());
      if (returnType.isCompiled()) {
        methodName += "$" + returnType.name();
      } else if (returnType.isUncompiled()) {
        methodName += "$" + returnType.compiledName(sol);
      }

      bodies = bodies.add(new MethodDecl(getModifiers(), getTypeAccess().genAccess(sol),
        methodName, params, getExceptionList(), hasBlock() ? new Opt(getBlock().genBlock(sol)) : new Opt()));
    }

    return bodies;
  }

  syn nta ParameterDeclaration ParameterDeclaration.genParameter(Map<Integer,TypeDecl> sol, Integer var)
    = new ParameterDeclaration(getModifiers(), getTypeAccess().genAccess(sol, var), getID());

  syn nta Access Access.genAccess(Map<Integer,TypeDecl> sol, Integer var) = treeCopy();

  eq TypeAccess.genAccess(Map<Integer,TypeDecl> sol, Integer var) {
    TypeDecl type = sol.get(var);
    if (type.isUncompiled()) {
      return new TypeAccess(getPackage(), type.compiledName(sol));
    }
    if (type.isCompiled()) {
      return new TypeAccess(getPackage(), type.name());
    }
    return treeCopy();
  }

  eq VersionTypeAccess.genAccess(Map<Integer,TypeDecl> sol, Integer var) {
    TypeDecl type = sol.get(var);
    return new TypeAccess(((TypeAccess) getTypeAccess()).getPackage(), type.compiledName(sol));
  }

  syn nta TypeDecl ClassDecl.genOverview(String name) {
    List<BodyDecl> bodies = new List();
    bodies = bodies.add(new FieldDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      new PrimitiveTypeAccess("boolean"),
      new List().add(new FieldDeclarator("BATAKJAVACLASS", new List(), new Opt()))));

    bodies = bodies.add(new FieldDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      new PrimitiveTypeAccess("boolean"),
      new List().add(new FieldDeclarator(name, new List(), new Opt()))));

    return new ClassDecl(new Modifiers(new List().add(new Modifier("public"))),
      getID(), new Opt(), new List(), bodies);
  }

  syn nta TypeDecl ClassDecl.updateOverview(TypeDecl overview, String name) {
    Set<String> foundNames = new HashSet();
    List<BodyDecl> bodies = new List();
    for (BodyDecl bodyDecl: overview.getBodyDeclList()) {
      if (bodyDecl instanceof FieldDecl) {
        bodies = bodies.add(bodyDecl);
        FieldDecl field = (FieldDecl) bodyDecl;
        if (field.getNumDeclarator() == 1 && !foundNames.contains(field.getDeclarator(0).getID())) {
          foundNames.add(field.getDeclarator(0).getID());
        }
      }
    }
    if (!foundNames.contains(name)) {
      bodies = bodies.add(new FieldDecl(
        new Modifiers(new List().add(new Modifier("public"))),
        new PrimitiveTypeAccess("boolean"),
        new List().add(new FieldDeclarator(name, new List(), new Opt()))));
    }
    return new ClassDecl(overview.getModifiers(), overview.getID(), new Opt(), new List(), bodies);
  }

}


aspect JavaGeneration {

  /**
   *  Obtaining a latest solution is impossible, because
   *  we can create a situation where different solution
   *  provides not only different version, but also different
   *  type. There is no possible way to compare the order
   *  of types in the context of which is more prioritized.
   */
  syn nta CompilationUnit CompilationUnit.genJava(java.util.List<Map<Integer,TypeDecl>> solutions) {
    List<ImportDecl> imports = new List();
    for (ImportDecl imp: getImportDeclList()) {
      imports = imports.addAll(imp.genImport(solutions));
    }

    List<TypeDecl> types = new List();
    for (TypeDecl type: getTypeDeclList()) {
      types = types.addAll(type.genTypes(solutions, imports));
    }    

    CompilationUnit newUnit = new CompilationUnit(getPackageDecl(), imports, types);
    newUnit.setFromSource(true);
    newUnit.setClassSource(getClassSource());

    return newUnit;
  }

  /** Import declarations **/
  syn nta List<ImportDecl> ImportDecl.genImport(java.util.List<Map<Integer,TypeDecl>> solutions) = new List().add(treeCopy());

  eq SingleTypeImportDecl.genImport(java.util.List<Map<Integer,TypeDecl>> solutions) {
    List<ImportDecl> imports = new List();
    SimpleSet<String> addedTypes = emptySet();
    for (TypeDecl type: getAccess().typeSet()) {
      for (Map<Integer,TypeDecl> sol: solutions) {
        for (Integer infType: sol.keySet()) {
          if (type == sol.get(infType) && type.version() != null
              && !addedTypes.contains(type.compiledName(sol))) {
            imports = imports.add(
              new SingleTypeImportDecl(getAccess().genImportAccess(type, sol)));
            addedTypes = addedTypes.add(type.compiledName(sol));
          }
        }
      }
    }
    return imports;
  }

  /** Type declarations **/
  syn nta List<TypeDecl> TypeDecl.genTypes(java.util.List<Map<Integer,TypeDecl>> solutions, List<ImportDecl> imports) =
    new List().add(treeCopy());

  eq VersionClassDecl.genTypes(java.util.List<Map<Integer,TypeDecl>> solutions, List<ImportDecl> imports) {
    List<TypeDecl> types = new List();
    List<TypeDecl> overviews = new List();
    Set<String> typeNames = new HashSet();

    Map<Set<TypeDecl>,java.util.List<Map<Integer,TypeDecl>>> groups = groupSolutions(solutions);

    for (Set<TypeDecl> ancestorType: groups.keySet()) {
      java.util.List<Map<Integer,TypeDecl>> group = groups.get(ancestorType);
      // TODO: Use the latest solution if possible
      Map<Integer,TypeDecl> sol = group.iterator().next();
      TypeDecl type = genType(sol, group);
      types = types.add(type);
      typeNames.add(type.name());
    }

    // Generate overview
    TypeDecl compiled = program().lookupLibraryType(packageName(), getID());
    if (compiled.isUnknown()) {
      TypeDecl compiling = program().updateCompilingOverview(packageName(), getID());
      if (compiling.isUnknown()) {
        overviews = overviews.add(genOverview(typeNames));
      } else {
        overviews = overviews.add(updateOverview(compiling, typeNames));
      }
    } else {
      overviews = overviews.add(updateOverview(compiled, typeNames));
    }

    // Adding overview units to a temporary variable
    CompilationUnit unit = new CompilationUnit(compilationUnit().getPackageDecl(), imports, overviews);
    unit.setFromSource(true);
    unit.setClassSource(compilationUnit().getClassSource());
    program().genOverview.add(unit);

    return types;
  }

  syn nta TypeDecl VersionClassDecl.genType(Map<Integer,TypeDecl> sel, java.util.List<Map<Integer,TypeDecl>> sols) {
    String className = compiledName(sel);
    Opt<Access> superAccess = hasSuperClass() ? new Opt(getSuperClass().genAccess(sel)) : new Opt();

    List<BodyDecl> bodies = new List();
    for (BodyDecl body: getBodyDeclList()) {
      bodies = bodies.addAll(body.genBodies(sel, sols));
    }

    return new ClassDecl(getModifiers(), className, superAccess, getImplementsList(), bodies);
  }

  /** Body declarations **/
  syn nta List<BodyDecl> BodyDecl.genBodies(Map<Integer,TypeDecl> sel, java.util.List<Map<Integer,TypeDecl>> sols) =
    new List().add(treeCopy());

  eq FieldDecl.genBodies(Map<Integer,TypeDecl> sel, java.util.List<Map<Integer,TypeDecl>> sols) {
    List<BodyDecl> bodies = new List();
    for (FieldDeclarator decl: getDeclaratorList()) {
      bodies = bodies.add(
        new FieldDecl(getModifiers(), getTypeAccess().genAccess(sel), new List().add(decl.genDeclarator(sel))));
    }
    return bodies;
  }

  eq ConstructorDecl.genBodies(Map<Integer,TypeDecl> sel, java.util.List<Map<Integer,TypeDecl>> sols) {
    List<BodyDecl> bodies = new List();

    for (Map<Integer,TypeDecl> sol: filterSolutions(sel, sols)) {
      List<ParameterDeclaration> params = new List();
      for (ParameterDeclaration param: getParameterList()) {
        params = params.add(param.genParameter(sol));
      }

      Opt<Stmt> parsed = hasParsedConstructorInvocation()
        ? new Opt(getParsedConstructorInvocation().genStmt(sol)) : new Opt();

      bodies = bodies.add(new ConstructorDecl(
        getModifiers(), ((ClassDecl) hostType()).compiledName(sol), params,
        getExceptionList(), parsed, getBlock().genBlock(sol)
      ));
    }
    return bodies;
  }

  eq MethodDecl.genBodies(Map<Integer,TypeDecl> sel, java.util.List<Map<Integer,TypeDecl>> sols) {
    List<BodyDecl> bodies = new List();

    for (Map<Integer,TypeDecl> sol: filterSolutions(sel, sols)) {
      List<ParameterDeclaration> params = new List();
      for (ParameterDeclaration param: getParameterList()) {
        params = params.add(param.genParameter(sol));
      }

      String methodName = getID();
      TypeDecl returnType = sol.get(getTypeAccess().infVar());
      if (returnType.isCompiled()) {
        methodName += "$" + returnType.name();
      } else if (returnType.isUncompiled()) {
        methodName += "$" + returnType.compiledName(sol);
      }

      MethodDecl newMethod = new MethodDecl(getModifiers(), getTypeAccess().genAccess(sol),
        methodName, params, getExceptionList(), hasBlock() ? new Opt(getBlock().genBlock(sol)) : new Opt());

      bodies = bodies.add(newMethod);
    }
    return bodies;
  }

  /** Stmt **/
  syn nta Stmt Stmt.genStmt(Map<Integer,TypeDecl> sol) = treeCopy();

  eq Block.genStmt(Map<Integer,TypeDecl> sol) = genBlock(sol);

  eq ReturnStmt.genStmt(Map<Integer,TypeDecl> sol)
    = hasResult() ? new ReturnStmt(new Opt(getResult().genExpr(sol))) : treeCopy();

  eq IfStmt.genStmt(Map<Integer,TypeDecl> sol) {
    Opt<Stmt> elseStmt = hasElse() ? new Opt(getElse().genStmt(sol)) : new Opt();
    return new IfStmt(getCondition().genExpr(sol), getThen().genStmt(sol), elseStmt);
  }

  eq VarDeclStmt.genStmt(Map<Integer,TypeDecl> sol) {
    List<VariableDeclarator> decls = new List();
    for (VariableDeclarator decl: getDeclaratorList()) {
      decls.add(decl.genDeclarator(sol));
    }
    return new VarDeclStmt(getModifiers(), getTypeAccess().genAccess(sol), decls);
  }

  eq DoStmt.genStmt(Map<Integer,TypeDecl> sol)
    = new DoStmt(getStmt().genStmt(sol), getCondition().genExpr(sol));

  eq ForStmt.genStmt(Map<Integer,TypeDecl> sol) {
    List<Stmt> initStmts = new List();
    for (Stmt initStmt: getInitStmtList()) {
      initStmts.add(initStmt.genStmt(sol));
    }
    List<Stmt> updateStmts = new List();
    for (Stmt updateStmt: getUpdateStmtList()) {
      updateStmts.add(updateStmt.genStmt(sol));
    }
    return new ForStmt(
      initStmts, hasCondition() ? new Opt(getCondition().genExpr(sol)) : new Opt(),
      updateStmts, getStmt().genStmt(sol));
  }

  eq SwitchStmt.genStmt(Map<Integer,TypeDecl> sol)
    = new SwitchStmt(getExpr().genExpr(sol), getBlock().genBlock(sol));

  eq ConstCase.genStmt(Map<Integer,TypeDecl> sol)
    = new ConstCase(getValue().genExpr(sol));

  eq WhileStmt.genStmt(Map<Integer,TypeDecl> sol)
    = new WhileStmt(getCondition().genExpr(sol), getStmt().genStmt(sol));

  eq LabeledStmt.genStmt(Map<Integer,TypeDecl> sol)
    = new LabeledStmt(getLabel(), getStmt().genStmt(sol));

  eq ExprStmt.genStmt(Map<Integer,TypeDecl> sol)
    = new ExprStmt(getExpr().genExpr(sol));

  eq AssertStmt.genStmt(Map<Integer,TypeDecl> sol)
    = new AssertStmt(
        getCondition().genExpr(sol),
        hasMessage() ? new Opt(getMessage().genExpr(sol)) : new Opt());

  eq SynchronizedStmt.genStmt(Map<Integer,TypeDecl> sol)
    = new SynchronizedStmt(getExpr().genExpr(sol), getBlock().genBlock(sol));

  eq TryStmt.genStmt(Map<Integer,TypeDecl> sol) {
    List<CatchClause> catchClauses = new List();
    for (CatchClause catchClause: getCatchClauseList()) {
      catchClauses = catchClauses.add(catchClause.genCatchClause(sol));
    }
    return hasFinally()
      ? new TryStmt(getBlock().genBlock(sol), catchClauses, new Opt<Block>(getFinally().genBlock(sol)))
      : new TryStmt(getBlock().genBlock(sol), catchClauses, new Opt<Block>());
  }


  /** Block **/
  syn nta Block Block.genBlock(Map<Integer,TypeDecl> sol) {
    List<Stmt> stmts = new List();
    for (Stmt stmt: getStmtList()) {
      stmts = stmts.add(stmt.genStmt(sol));
    }
    return new Block(stmts);
  }

  /** Parameter **/
  syn nta ParameterDeclaration ParameterDeclaration.genParameter(Map<Integer,TypeDecl> sol) =
    new ParameterDeclaration(getModifiers(), getTypeAccess().genAccess(sol), getID());

  /** CatchClause **/
  syn nta CatchClause CatchClause.genCatchClause(Map<Integer,TypeDecl> sol) = treeCopy();

  eq BasicCatch.genCatchClause(Map<Integer,TypeDecl> sol)
    = new BasicCatch(getParameter().genParameter(sol), getBlock().genBlock(sol));

  // treeCopy() because it is a CatchParameterDeclaration
  eq MultiCatch.genCatchClause(Map<Integer,TypeDecl> sol)
    = new MultiCatch(getParameter().treeCopy(), getBlock().genBlock(sol));

  /** Expr **/
  syn nta Expr Expr.genExpr(Map<Integer,TypeDecl> sol) = treeCopy();

  eq Access.genExpr(Map<Integer,TypeDecl> sol) = genAccess(sol);

  eq AssignExpr.genExpr(Map<Integer,TypeDecl> sol) {
    AssignExpr result = treeCopy();
    result.setDest(getDest().genExpr(sol));
    result.setSource(getSource().genExpr(sol));
    return result;
  }

  eq Binary.genExpr(Map<Integer,TypeDecl> sol) {
    Binary result = treeCopy();
    result.setLeftOperand(getLeftOperand().genExpr(sol));
    result.setRightOperand(getRightOperand().genExpr(sol));
    return result;
  }

  eq Unary.genExpr(Map<Integer,TypeDecl> sol) {
    Unary result = treeCopy();
    result.setOperand(getOperand().genExpr(sol));
    return result;
  }

  eq ConditionalExpr.genExpr(Map<Integer,TypeDecl> sol)
    = new ConditionalExpr(
        getCondition().genExpr(sol),
        getTrueExpr().genExpr(sol),
        getFalseExpr().genExpr(sol));

  eq ArrayInit.genExpr(Map<Integer,TypeDecl> sol) = genArrayInit(sol);

  eq InstanceOfExpr.genExpr(Map<Integer,TypeDecl> sol)
    = new InstanceOfExpr(getExpr().genExpr(sol), getTypeAccess().genAccess(sol));

  eq ArrayCreationExpr.genExpr(Map<Integer,TypeDecl> sol)
    = new ArrayCreationExpr(
        getTypeAccess().genAccess(sol),
        hasArrayInit() ? new Opt(getArrayInit().genArrayInit(sol)) : new Opt());

  eq ParExpr.genExpr(Map<Integer,TypeDecl> sol)
    = new ParExpr(getExpr().genExpr(sol));

  /** Access **/
  syn nta Access Access.genAccess(Map<Integer,TypeDecl> sol) = treeCopy();

  eq TypeAccess.genAccess(Map<Integer,TypeDecl> sol) {
    TypeDecl type = sol.get(infVar());
    if (type.isUncompiled()) {
      return new TypeAccess(getPackage(), type.compiledName(sol));
    }
    if (type.isCompiled()) {
      return new TypeAccess(getPackage(), type.name());
    }
    return treeCopy();
  }

  eq VersionTypeAccess.genAccess(Map<Integer,TypeDecl> sol) {
    TypeDecl type = sol.get(infVar());
    return new TypeAccess(((TypeAccess) getTypeAccess()).getPackage(), type.compiledName(sol));
  }

  eq ParTypeAccess.genAccess(Map<Integer,TypeDecl> sol) {
    Access typeAccess = getTypeAccess().genAccess(sol);
    List<Access> typeArgs = new List();
    for (Access typeArg: getTypeArgumentList()) {
      typeArgs = typeArgs.add(typeArg.genAccess(sol));
    }
    return new ParTypeAccess(typeAccess, typeArgs);
  }

  /*
  eq VarAccess.genAccess(Map<Integer,TypeDecl> sol) {
    if (isFieldAccess() && sol.get(infVar()) != null) {
      TypeDecl type = sol.get(infVar());
      if (type.isUncompiled()) {
        String compiledName = type.compiledName(sol);
        return new VarAccess(getID() + "$" + compiledName);
      }
      if (type.isCompiled()) {
        return new VarAccess(getID() + "$" + type.name());
      }
    }
    return treeCopy();
  }
  */

  eq VarAccess.genAccess(Map<Integer,TypeDecl> sol) = treeCopy();

  eq MethodAccess.genAccess(Map<Integer,TypeDecl> sol) {
    String methodName = getID();

    if (sol.get(infVar()) != null) {
      TypeDecl type = sol.get(infVar());
      if (type.isCompiled()) {
        methodName += "$" + type.name();
      } else if (type.isUncompiled()) {
        String compiledName = type.compiledName(sol);
        methodName += "$" + compiledName;
      }
    }

    List<Expr> args = new List();
    for (Expr arg: getArgList()) {
      args = args.add(arg.genExpr(sol));
    }

    return new MethodAccess(methodName, args);
  }

  eq Dot.genAccess(Map<Integer,TypeDecl> sol) {
    return new Dot(getLeft().genExpr(sol), getRight().genAccess(sol));
  }

  eq ClassInstanceExpr.genAccess(Map<Integer,TypeDecl> sol) {
    List<Expr> args = new List();
    for (Expr arg: getArgList()) {
      args = args.add(arg.genExpr(sol));
    }
    return new ClassInstanceExpr(getAccess().genAccess(sol), args);
  }

  eq ArrayAccess.genAccess(Map<Integer,TypeDecl> sol)
    = new ArrayAccess(getExpr().genExpr(sol));

  eq ConstructorAccess.genAccess(Map<Integer,TypeDecl> sol) {
    String accessName = getID();

    if (!accessName.equals("this") && sol.get(infVar()) != null) {
      TypeDecl type = sol.get(infVar());
      if (type.isCompiled()) {
        accessName = type.name();
      } else if (type.isUncompiled()) {
        accessName = type.compiledName(sol);
      }
    }

    List<Expr> args = new List();
    for (Expr arg: getArgList()) {
      args = args.add(arg.genExpr(sol));
    }

    return new ConstructorAccess(accessName, args);
  }

  eq SuperConstructorAccess.genAccess(Map<Integer,TypeDecl> sol) {
    List<Expr> args = new List();
    for (Expr arg: getArgList()) {
      args = args.add(arg.genExpr(sol));
    }
    return new SuperConstructorAccess(name(), args);
  }

  syn nta Access Access.genImportAccess(TypeDecl type, Map<Integer,TypeDecl> sol) = treeCopy();

  eq TypeAccess.genImportAccess(TypeDecl type, Map<Integer,TypeDecl> sol) {
    return new TypeAccess(packageName(), type.compiledName(sol));
  }

  /** Variable **/
  syn nta VariableDeclarator VariableDeclarator.genDeclarator(Map<Integer,TypeDecl> sol)
    = new VariableDeclarator(getID(), getDimsList(), hasInit() ? new Opt(getInit().genExpr(sol)) : new Opt());

  /*
  syn nta FieldDeclarator FieldDeclarator.genDeclarator(Map<Integer,TypeDecl> sol) {
    TypeDecl type = sol.get(infVar());
    Opt<Expr> init = hasInit() ? new Opt(getInit().genExpr(sol)) : new Opt();
    if (type.isUncompiled()) {
      return new FieldDeclarator(getID() + "$" + type.compiledName(sol), getDimsList(), init);
    }
    if (type.isCompiled()) {
      return new FieldDeclarator(getID() + "$" + type.name(), getDimsList(), init);
    }
    return treeCopy();
  }
  */

  syn nta FieldDeclarator FieldDeclarator.genDeclarator(Map<Integer,TypeDecl> sol)
    = new FieldDeclarator(getID(), getDimsList(), hasInit() ? new Opt(getInit().genExpr(sol)) : new Opt());

  /** ArrayInit **/
  syn nta ArrayInit ArrayInit.genArrayInit(Map<Integer,TypeDecl> sol) {
    List<Expr> inits = new List();
    for (Expr init: getInitList()) {
      inits = inits.add(init.genExpr(sol));
    }
    return new ArrayInit(inits);
  }
}

aspect JavaGeneration {

  public String TypeDecl.compiledName(Map<Integer,TypeDecl> sol) { return name(); }

  public String VersionClassDecl.compiledName(Map<Integer,TypeDecl> sol) {
    String className = getID() + "_ver_" + version();
    if (hasSuperClass()) {
      TypeDecl superclass = sol.get(getSuperClass().infVar());
      if (superclass.isCompiled()) {
        className += "$" + superclass.name();
      } else if (superclass.isUncompiled()) {
        className += "$" + superclass.compiledName(sol);
      }
    }
    return className;
  }

}

aspect Solutions {

  public java.util.List<Map<Integer,TypeDecl>> Program.selectSolutions() {
    java.util.List<Map<Integer,TypeDecl>> sols = solutions;
    for (CompilationUnit unit: getCompilationUnitList()) {
      for (TypeDecl type: unit.getTypeDeclList()) {
        sols = type.selectSolutions(sols);
      }
    }
    return sols;
  }

  public java.util.List<Map<Integer,TypeDecl>> TypeDecl.selectSolutions(
      java.util.List<Map<Integer,TypeDecl>> sols) {
    return sols;
  }

  public java.util.List<Map<Integer,TypeDecl>> ClassDecl.selectSolutions(
      java.util.List<Map<Integer,TypeDecl>> group) {
    java.util.List<Integer> fieldVarList = new ArrayList();
    for (BodyDecl body: getBodyDeclList()) {
      if (body instanceof FieldDecl) {
        fieldVarList.add(((FieldDecl) body).getTypeAccess().infVar());
      }
    }

    java.util.List<Map<Integer,TypeDecl>> fieldMapList = new ArrayList();
    Map<Map<Integer,TypeDecl>, java.util.List<Map<Integer,TypeDecl>>> fieldGroups = new HashMap();
    for (Map<Integer,TypeDecl> sol: group) {
      Map<Integer,TypeDecl> fieldMap = new HashMap(fieldVarList.size());
      for (Integer solKey: sol.keySet()) {
        if (fieldVarList.contains(solKey)) {
          fieldMap.put(solKey, sol.get(solKey));
        }
      }
      if (!fieldMapList.contains(fieldMap)) {
        ListIterator<Map<Integer,TypeDecl>> listIter = fieldMapList.listIterator();
        boolean flag = true;
        while (listIter.hasNext()) {
          Map<Integer,TypeDecl> otherMap = listIter.next();
          Optional<Boolean> check = isLargerSolution(otherMap, fieldMap);
          if (check.isPresent()) {
            if (check.get()) {
              flag = false;
              break;
            } else {
              Optional<Boolean> checkReverse = isLargerSolution(fieldMap, otherMap);
              if (checkReverse.isPresent() && checkReverse.get()) {
                listIter.remove();
                fieldGroups.remove(otherMap);
              }
            }
          }
        }
        if (flag) {
          fieldMapList.add(fieldMap);
          java.util.List<Map<Integer,TypeDecl>> newGroup = new ArrayList();
          newGroup.add(sol);
          fieldGroups.put(fieldMap, newGroup);
        }
      } else {
        fieldGroups.get(fieldMap).add(sol);
      }
    }

    // Returns an arbitrary solution from the filtered list
    return fieldGroups.get(fieldMapList.iterator().next());
  }

  private Optional<Boolean> ClassDecl.isLargerSolution(Map<Integer,TypeDecl> a, Map<Integer,TypeDecl> b) {
    if (a.size() != b.size()) {
      return Optional.empty();
    }

    boolean start = false;
    boolean aIsLargerOrEqual = true;

    for (Integer keyA: a.keySet()) {
      if (!b.containsKey(keyA)) {
        return Optional.empty();
      }

      if (a.get(keyA).versionNumber() == null) {
        if (b.get(keyA).versionNumber() != null) {
          return Optional.empty();
        }
      } else if (b.get(keyA).versionNumber() == null) {
        return Optional.empty();
      } else if (a.get(keyA).versionNumber() >= b.get(keyA).versionNumber()) {
        if (start) {
          if (!aIsLargerOrEqual) {
            return Optional.of(false);
          }
        } else {
          start = true;
          aIsLargerOrEqual = true;
        }
      } else {
        if (start) {
          if (aIsLargerOrEqual) {
            return Optional.of(false);
          }
        } else {
          start = true;
          aIsLargerOrEqual = false;
        }
      }
    }

    return Optional.of(aIsLargerOrEqual);
  }

  /**
   *  Group solutions for class declaration based on its superclass
   *
  private Map<TypeDecl,java.util.List<Map<Integer,TypeDecl>>> ClassDecl.groupSolutions(
      java.util.List<Map<Integer,TypeDecl>> solutions) {
    Map<TypeDecl,java.util.List<Map<Integer,TypeDecl>>> result = new HashMap(solutions.size());
    if (hasSuperClass()) {
      Integer var = getSuperClass().infVar();
      for (Map<Integer,TypeDecl> solution: solutions) {
        TypeDecl solutionType = solution.get(var);
        if (result.containsKey(solutionType)) {
          result.get(solutionType).add(solution);
        } else {
          java.util.List<Map<Integer,TypeDecl>> solutionList = new ArrayList();
          solutionList.add(solution);
          result.put(solutionType, solutionList);
        }
      }
    } else {
      result.put(typeObject(), solutions);
    }
    return result;
  }
   */

  private Map<Set<TypeDecl>,java.util.List<Map<Integer,TypeDecl>>> VersionClassDecl.groupSolutions(
      java.util.List<Map<Integer,TypeDecl>> sols) {
    Map<Set<TypeDecl>, java.util.List<Map<Integer,TypeDecl>>> result = new HashMap(sols.size());
    for (Map<Integer,TypeDecl> sol: sols) {
      Set<TypeDecl> ancestorSet = ancestorTypeSet(sol);
      if (result.containsKey(ancestorSet)) {
        result.get(ancestorSet).add(sol);
      } else {
        java.util.List<Map<Integer,TypeDecl>> solList = new ArrayList();
        solList.add(sol);
        result.put(ancestorSet, solList);
      }
    }
    return result;
  }

  public java.util.Set<TypeDecl> TypeDecl.ancestorTypeSet(Map<Integer,TypeDecl> sol) {
    return Collections.emptySet();
  }

  public java.util.Set<TypeDecl> ClassDecl.ancestorTypeSet(Map<Integer,TypeDecl> sol) {
    java.util.Set<TypeDecl> result = new HashSet();
    if (hasSuperClass()) {
      TypeDecl superType = sol.get(getSuperClass().infVar());
      result.add(superType);
      if (superType.isUncompiled()) {
        result.addAll(superType.ancestorTypeSet(sol));
      }
    } else {
      result.add(typeObject());
    }
    return result;
  }

  protected java.util.List<Map<Integer,TypeDecl>> BodyDecl.filterSolutions(
      Map<Integer,TypeDecl> sel, java.util.List<Map<Integer,TypeDecl>> sols) {
    Map<Map<Integer,TypeDecl>,java.util.List<Map<Integer,TypeDecl>>> mapping = new HashMap();

    for (Map<Integer,TypeDecl> sol: sols) {
      Map<Integer,TypeDecl> map = paramMap(sol);
      if (mapping.containsKey(map)) {
        mapping.get(map).add(sol);
      } else {
        java.util.List<Map<Integer,TypeDecl>> newGroup = new ArrayList() {{ add(sol); }};
        mapping.put(map, newGroup);
      }
    }

    java.util.List<Map<Integer,TypeDecl>> result = new ArrayList(mapping.size());
    Map<Integer,TypeDecl> selParamMap = paramMap(sel);

    for (Map<Integer,TypeDecl> key: mapping.keySet()) {
      if (key.equals(selParamMap) && !result.contains(sel)) {
        result.add(sel);
      } else {
        Map<Integer,TypeDecl> toAdd = mapping.get(key).iterator().next();
        if (!result.contains(toAdd)) {
          result.add(toAdd);
        }
      }
    }

    return result;
  }

  protected Map<Integer,TypeDecl> BodyDecl.paramMap(Map<Integer,TypeDecl> sol) { return new HashMap(); }

  protected Map<Integer,TypeDecl> FieldDecl.paramMap(Map<Integer,TypeDecl> sol) {
    Map<Integer,TypeDecl> map = new HashMap(1);
    map.put(getTypeAccess().infVar(), sol.get(getTypeAccess().infVar()));
    return map;
  }

  protected Map<Integer,TypeDecl> ConstructorDecl.paramMap(Map<Integer,TypeDecl> sol) {
    Map<Integer,TypeDecl> map = new HashMap(getNumParameter());
    for (ParameterDeclaration param: getParameterList()) {
      map.put(param.infVar(), sol.get(param.infVar()));
    }
    return map;
  }

  protected Map<Integer,TypeDecl> MethodDecl.paramMap(Map<Integer,TypeDecl> sol) {
    Map<Integer,TypeDecl> map = new HashMap(getNumParameter() + 1);
    for (ParameterDeclaration param: getParameterList()) {
      map.put(param.infVar(), sol.get(param.infVar()));
    }
    map.put(getTypeAccess().infVar(), sol.get(getTypeAccess().infVar()));
    return map;
  }

}

aspect OverviewGeneration {

  syn nta TypeDecl ClassDecl.genOverview(Set<String> names) {
    List<BodyDecl> bodies = new List();
    bodies = bodies.add(new FieldDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      new PrimitiveTypeAccess("boolean"),
      new List().add(new FieldDeclarator("BATAKJAVACLASS", new List(), new Opt()))));

    for (String name: names) {
      bodies = bodies.add(new FieldDecl(
        new Modifiers(new List().add(new Modifier("public"))),
        new PrimitiveTypeAccess("boolean"),
        new List().add(new FieldDeclarator(name, new List(), new Opt()))));
    }

    return new ClassDecl(new Modifiers(new List().add(new Modifier("public"))),
      getID(), new Opt(), new List(), bodies);
  }

  syn nta TypeDecl ClassDecl.updateOverview(TypeDecl overview, Set<String> names) {
    Set<String> foundNames = new HashSet(names.size());
    List<BodyDecl> bodies = new List();
    for (BodyDecl bodyDecl: overview.getBodyDeclList()) {
      if (bodyDecl instanceof FieldDecl) {
        bodies = bodies.add(bodyDecl);
        FieldDecl field = (FieldDecl) bodyDecl;
        if (field.getNumDeclarator() == 1 && !foundNames.contains(field.getDeclarator(0).getID())) {
          foundNames.add(field.getDeclarator(0).getID());
        }
      }
    }
    for (String name: names) {
      if (!foundNames.contains(name)) {
        bodies = bodies.add(new FieldDecl(
          new Modifiers(new List().add(new Modifier("public"))),
          new PrimitiveTypeAccess("boolean"),
          new List().add(new FieldDeclarator(name, new List(), new Opt()))));
      }
    }
    return new ClassDecl(overview.getModifiers(), overview.getID(), new Opt(), new List(), bodies);
  }

  /**
   *  If the class packageName.typeName with a different version is
   *  being compiled at the same time, then there should already be
   *  an overview that can be updated
   */
  public TypeDecl Program.updateCompilingOverview(String packageName, String typeName) {
    int j = 0;
    TypeDecl result = unknownType();
    for (int i = 0; i < genOverview.size(); i++) {
      CompilationUnit compiling = genOverview.get(i);
      if (compiling.packageName().equals(packageName)
          && compiling.localLookupType(typeName).isSingleton()
          && compiling.getNumTypeDecl() > 0) {
        j = i;
        result = compiling.getTypeDecl(0);
      }
    }
    if (!result.isUnknown()) {
      genOverview.remove(j);
    }
    return result;
  }

}