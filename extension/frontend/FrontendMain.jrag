aspect BatakjavaFrontendMain {

  public long Program.constraintGenTime;
  public long Program.solvingTime;
  public long Program.javaGenTime;
  public long Program.verErrorCheckTime;

  /**
   *  Frontend class for Batakjava
   */
  abstract public class BatakjavaFrontend extends Frontend {

    protected BatakjavaFrontend(String name, String version) {
      super(name, version);
    }

    @Override
    public int run(String[] args, BytecodeReader reader, JavaParser parser) {

      program.resetStatistics();
      program.initBytecodeReader(reader);
      program.initJavaParser(parser);

      initOptions();
      int argResult = processArgs(args);
      if (argResult != 0) {
        return argResult;
      }

      Collection<String> files = program.options().files();

      if (program.options().hasOption("-version")) {
        printVersion();
        return EXIT_SUCCESS;
      }

      if (program.options().hasOption("-help") || files.isEmpty()) {
        printUsage();
        return EXIT_SUCCESS;
      }

      try {
        for (String file: files) {
          program.addSourceFile(file);
        }

        TypeDecl object = program.lookupType("java.lang", "Object");
        if (object.isUnknown()) {
          System.err.println("Error: java.lang.Object is missing."
            + " The Java standard library was not found.");
          return EXIT_UNHANDLED_ERROR;
        }

        int compileResult = EXIT_SUCCESS;

        program.initializeInfVar();
        program.initializeInfType();

        for (CompilationUnit unit: program.getCompilationUnitList()) {
          int result = processVerCompilationUnit(unit);
          switch (result) {
            case EXIT_SUCCESS:
              break;
            case EXIT_UNHANDLED_ERROR:
              return result;
            default:
              compileResult = result;
          }
        }

        if (compileResult != EXIT_SUCCESS) {
          return compileResult;
        }

        System.out.println("Type map: " + program.printInfTypeMap());

        if (program.solveConstraint() != EXIT_SUCCESS) {
          System.err.println("No solution found for the program");
          return compileResult;
        }

      } catch (Throwable t) {
        System.err.println("Fatal exception:");
        t.printStackTrace(System.err);
        return EXIT_UNHANDLED_ERROR;
      } finally {
        if (program.options().hasOption("-profile")) {
          program.printStatistics(System.out);
        }
      }

      return EXIT_SUCCESS;
    }

    protected int processVerCompilationUnit(CompilationUnit unit) throws Error {
      if (unit != null && unit.fromSource()) {
        try {
          Collection<Problem> errors = unit.parseErrors();
          Collection<Problem> warnings = Collections.emptyList();
          if (errors.isEmpty()) {
            long start = System.nanoTime();
            errors = unit.verErrors();
            warnings = unit.verWarnings();
            program.verErrorCheckTime += System.nanoTime() - start;
          }
          if (!errors.isEmpty()) {
            processErrors(errors, unit);
            return EXIT_ERROR;
          } else {
            if (!warnings.isEmpty() && !program.options().hasOption("-nowarn")) {
              processWarnings(warnings, unit);
            }
          }
        } catch (Error e) {
          System.err.println("Encountered error while processing " + unit.pathName());
          throw e;
        }
      }
      return EXIT_SUCCESS;
    }

  }

  public java.util.List<CompilationUnit> Program.genUnits = new LinkedList();

  abstract public class BatakjavaBackend extends BatakjavaFrontend {

    protected Program genProgram;

    protected BatakjavaBackend(String name, String version) {
      super(name, version);
      genProgram = new Program();
      genProgram.state().reset();
    }

    @Override
    protected void initOptions() {
      super.initOptions();

      Options genOptions = genProgram.options();
      genOptions.addKeyValueOption("-d");
    }

    @Override
    public int run(String[] args, BytecodeReader reader, JavaParser parser) {

      program.resetStatistics();
      genProgram.resetStatistics();
      program.initBytecodeReader(reader);
      program.initJavaParser(parser);

      initOptions();
      int argResult = processArgs(args);
      genProgram.options().addOptions(args);
      if (argResult != 0) {
        return argResult;
      }

      Collection<String> files = program.options().files();

      if (program.options().hasOption("-version")) {
        printVersion();
        return EXIT_SUCCESS;
      }

      if (program.options().hasOption("-help") || files.isEmpty()) {
        printUsage();
        return EXIT_SUCCESS;
      }

      try {
        for (String file: files) {
          program.addSourceFile(file);
        }

        TypeDecl object = program.lookupType("java.lang", "Object");
        if (object.isUnknown()) {
          System.err.println("Error: java.lang.Object is missing."
            + " The Java standard library was not found.");
          return EXIT_UNHANDLED_ERROR;
        }

        int compileResult = EXIT_SUCCESS;

        program.initializeInfVar();
        program.initializeInfType();

        for (CompilationUnit unit: program.getCompilationUnitList()) {
          int result = processVerCompilationUnit(unit);
          switch (result) {
            case EXIT_SUCCESS:
              break;
            case EXIT_UNHANDLED_ERROR:
              return result;
            default:
              compileResult = result;
          }
        }

        if (compileResult != EXIT_SUCCESS) {
          return compileResult;
        }

        if (program.solveConstraint() != EXIT_SUCCESS) {
          System.err.println("No solution found for the program");
          return compileResult;
        }

        System.out.println("Type map: " + program.printInfTypeMap());

        long genStart = System.nanoTime();

        /** Generate Java classes **/
        for (CompilationUnit unit: program.getCompilationUnitList()) {
          CompilationUnit newUnit = unit.genJava(program.solutions);
          genProgram.addCompilationUnit(newUnit);
        }

        program.javaGenTime += System.nanoTime() - genStart;

        /** Initialize lookup **/
        object = genProgram.lookupType("java.lang", "Object");
        if (object.isUnknown()) {
          return EXIT_UNHANDLED_ERROR;
        }

        Collection<CompilationUnit> work = new LinkedList<CompilationUnit>();

        /* Debugging purpose
        for (CompilationUnit newUnit: genProgram.getCompilationUnitList()) {
          System.err.println(newUnit.prettyPrint());
        }
        */

        for (CompilationUnit newUnit: genProgram.getCompilationUnitList()) {
          work.add(newUnit);
          int result = processCompilationUnit(newUnit);
          switch (result) {
            case EXIT_SUCCESS:
              break;
            case EXIT_UNHANDLED_ERROR:
              return result;
            default:
              compileResult = result;
          }
        }

        for (CompilationUnit newUnit: work) {
          if (newUnit != null && newUnit.fromSource()) {
            long start = System.nanoTime();
            processNoErrors(newUnit);
            program.codeGenTime += System.nanoTime() - start;
          }
        }

      } catch (Throwable t) {
        System.err.println("Fatal exception:");
        t.printStackTrace(System.err);
        return EXIT_UNHANDLED_ERROR;
      } finally {
        if (program.options().hasOption("-profile")) {
          program.printStatistics(System.out);
        }
      }

      return EXIT_SUCCESS;
    }

  }
}