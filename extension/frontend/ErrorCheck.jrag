aspect ErrorCheck {

  coll LinkedList<Problem> CompilationUnit.verProblems() root CompilationUnit;

  syn Collection<Problem> CompilationUnit.verErrors() {
    Collection<Problem> errors = new LinkedList();
    for (Problem problem: verProblems()) {
      if (problem.severity() == Problem.Severity.ERROR) {
        errors.add(problem);
      }
    }
    return errors;
  }

  syn Collection<Problem> CompilationUnit.verWarnings() {
    Collection<Problem> errors = new LinkedList();
    for (Problem problem: verProblems()) {
      if (problem.severity() == Problem.Severity.WARNING) {
        errors.add(problem);
      }
    }
    return errors;
  }

}


/**
 *  The following errors are used to debug the implementation
 */
aspect ImplementationCheck {

  VarAccess contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> VarAccess.implementationCheck() {
    /* Checked
    System.out.println(prettyPrint());
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  MethodAccess contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> MethodAccess.implementationCheck() {
    // TODO: Allow using generics
    /*
    System.out.println(prettyPrint());
    System.out.println("access var: " + infVar());
    for (Expr arg: getArgList()) {
      System.out.println("arg: " + arg.infVar());
    }
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  ClassInstanceExpr contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> ClassInstanceExpr.implementationCheck() {
    // TODO: Allow using generics
    /*
    System.out.println(prettyPrint());
    System.out.println("access var: " + infVar());
    for (Expr arg: getArgList()) {
      System.out.println("arg: " + arg.infVar());
    }
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  SuperConstructorAccess contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> SuperConstructorAccess.implementationCheck() {
    /* Checked
    System.out.println("type: " + hostType().verFullName());
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  VariableDeclarator contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> VariableDeclarator.implementationCheck() {
    /* Checked (assign-expr)
    System.out.println(prettyPrint());
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  AssignExpr contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> AssignExpr.implementationCheck() {
    /* Checked (assign-expr)
    System.out.println(prettyPrint());
    System.out.println(getDest().infVar());
    System.out.println(getSource().infVar());
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  Binary contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> Binary.implementationCheck() {
    /* Checked
    System.out.println(prettyPrint());
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  InstanceOfExpr contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> InstanceOfExpr.implementationCheck() {
    /* Checked
    System.out.println(prettyPrint());
    System.out.println(getExpr().infVar());
    System.out.println(getTypeAccess().infVar());
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  CastExpr contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> CastExpr.implementationCheck() {
    /* TODO: Check
    System.out.println(prettyPrint());
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  VersionTypeAccess contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> VersionTypeAccess.implementationCheck() {
    /* TODO: Check
    System.out.println(prettyPrint());
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  ArrayInit contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> ArrayInit.implementationCheck() {
    /* Checked
    System.out.println(prettyPrint());
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  ArrayAccess contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> ArrayAccess.implementationCheck() {
    /* Checked
    System.out.println(prettyPrint());
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  ReturnStmt contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> ReturnStmt.implementationCheck() {
    /* Checked
    System.out.println(prettyPrint());
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  IfStmt contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> IfStmt.implementationCheck() {
    /* Checked
    System.out.println(prettyPrint());
    System.out.println(constraint());
    */
    return Collections.emptyList();
  }

  ClassDecl contributes each implementationCheck() to CompilationUnit.verProblems();

  syn Collection<Problem> ClassDecl.implementationCheck() {
    /* Checked
    java.util.List<MethodDecl> methods = verMethods();
    System.err.println("type: " + verFullName());
    for (MethodDecl m: methods) {
      System.err.println(m.hostType().verFullName() + ": " + m.signature());
    }
    System.err.println();
    */

    /* Checked
    SimpleSet<Variable> fields = verMemberFields("f1");
    System.err.println("type: " + verFullName());
    for (Variable m: fields) {
      System.err.println(((Declarator) m).prettyPrint());
    }
    */

    return Collections.emptyList();
  }



}