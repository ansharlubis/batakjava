aspect ConstraintGeneration {

  // TODO: Get generics to be usable

  /**
   *  infTypeCount is the number of unique types in the program.
   *  infTypeMap is the mapping from types to the integer representations.
   */
  private Integer Program.infTypeCount = 0;
  public Map<TypeDecl,Integer> Program.infTypeMap = Collections.emptyMap();

  public void Program.initializeInfType() {
    infTypeCount = 0;
    infTypeMap = new HashMap<TypeDecl,Integer>();
  }

  // Should there be a contain check, or just stay with lazy
  public Integer Program.getInfType(TypeDecl type) {
    Integer count = infTypeCount;
    infTypeCount++;
    infTypeMap.put(type, count);
    return count;
  }

  public TypeDecl Program.intToType(Integer typeInt) {
    for (TypeDecl type: infTypeMap.keySet()) {
      if (infTypeMap.get(type) == typeInt) {
        return type;
      }
    }
    return unknownType();
  }

  public TypeDecl Expr.intToType(Integer typeInt) {
    return program().intToType(typeInt);
  }


  syn lazy Integer TypeDecl.infType() = program().getInfType(this);

  /**
   *  infVarCount is the number of variable for inference.
   *  infVarMap is the mapping from expressions to the variable integer.
   */
  private Integer Program.infVarCount = 0;
  public Map<ASTNode,Integer> Program.infVarMap = Collections.emptyMap();

  public void Program.initializeInfVar() {
    infVarCount = 0;
    infVarMap = new HashMap<ASTNode,Integer>();
  }

  public Integer Program.getInfVar(ASTNode node) {
    Integer count = infVarCount;
    infVarCount++;
    infVarMap.put(node, count);
    return count;
  }

  /**
   *  Inference variables for expressions and variables.
   *  Stored using lazy attribute.
   *
   *  NOTE:
   *  -- Super access' variable depends on the previous expression (if it exists)
   */
  syn lazy Integer Expr.infVar() = program().getInfVar(this);
  eq ClassInstanceExpr.infVar() = getAccess().infVar();
  eq VarAccess.infVar() = decl().infVar();
  eq Dot.infVar() = lastAccess().infVar();
  eq AssignExpr.infVar() = getDest().infVar();
  eq ParExpr.infVar() = getExpr().infVar();
  eq CastExpr.infVar() = getTypeAccess().infVar();

  syn lazy Integer Variable.infVar();
  eq ParameterDeclaration.infVar() = getTypeAccess().infVar();
  eq Declarator.infVar() = declarationType().infVar();

  /** Not supported variable **/
  eq EnumConstant.infVar() = program().getInfVar(this);
  eq CatchParameterDeclaration.infVar() = program().getInfVar(this);
  eq InferredParameterDeclaration.infVar() = program().getInfVar(this);

  /**
   *  Constraint generation for type checking, then version inference
   */
  syn lazy Optional<Formula> Expr.constraint() = Optional.empty();

  eq TypeAccess.constraint() {
    if (parent instanceof ImportDecl) {
      return Optional.of(new Formula());
    } else {
      Formula formula = new Formula();
      for (TypeDecl type: typeSet()) {
        formula = formula.add(buildClause(type));
      }
      return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
    }
  }

  eq ThisAccess.constraint() = Optional.of(buildFormula(type()));

  eq ClassInstanceExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl type: typeSet()) {
      for (ConstructorDecl constructor: type.constructors()) {
        Optional<Formula> sub = verApplicableAndAccessible(constructor);
        if (sub.isPresent()) {
          formula = formula.add(sub.get().multiply(buildClause(type)));
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq MethodAccess.constraint() {
    Formula formula = new Formula();
    Map<TypeDecl,Collection<MethodDecl>> map = verLookupMethod(name());

    for (TypeDecl qualifierType: map.keySet()) {
      for (MethodDecl method: map.get(qualifierType)) {
        Optional<Formula> trace = qualifierType.verInstanceOf(method.hostType());
        Optional<Formula> sub = verApplicableAndAccessible(method);
        if (trace.isPresent() && sub.isPresent()) {
          for (TypeDecl returnType: method.typeSet()) {
            Formula add = sub.get().multiply(trace.get()).multiply(buildClause(returnType));
            if (isQualified()) {
              formula = formula.add(add.multiply(qualifier().buildClause(qualifierType)));
            } else {
              formula = formula.add(add);
            }
          }
        }
      }
    }

    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq VarAccess.constraint() {
    Formula formula = new Formula();
    Map<TypeDecl,SimpleSet<Variable>> map = verLookupVariable(name());

    for (TypeDecl qualifierType: map.keySet()) {
      for (Variable var: map.get(qualifierType)) {
        for (TypeDecl varType: var.typeSet()) {
          if (qualifierType.isUnknown()) {
            Formula sub = buildFormula(varType);
            formula = formula.add(sub);
          } else {
            Optional<Formula> trace = qualifierType.verInstanceOf(var.hostType());
            if (trace.isPresent()) {
              Formula sub = isQualified()
                ? trace.get().multiply(buildClause(varType))
                             .multiply(qualifier().buildClause(qualifierType))
                : trace.get().multiply(buildClause(varType));
              formula = formula.add(sub);
            }
          }
        }
      }
    }

    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq SuperConstructorAccess.constraint() {
    Formula formula = new Formula();

    if (classHasSuperAccess()) {
      Access superAccess = ((ClassDecl) hostType()).getSuperClass();
      for (TypeDecl superType: superAccess.typeSet()) {
        for (ConstructorDecl constructor: superType.constructors()) {
          Optional<Formula> sub = verApplicableAndAccessible(constructor);
          if (sub.isPresent()) {
            formula = formula.add(sub.get().multiply(superAccess.buildClause(superType)));
          }
        }
      }
    } else if (!decls().isEmpty()) {
      return Optional.of(formula);
    }

    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq Dot.constraint() = lastAccess().constraint();

  /**
   *  Array expressions
   */
  // TODO: Array constraints

  /**
   *  Assign expressions
   */
  eq AssignExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl source: getSource().typeSet()) {
      for (TypeDecl dest: getDest().typeSet()) {
        if (source.isPrimitive() && dest.isPrimitive()) {
          formula = formula.add(
            getSource().buildFormula(source)
              .multiply(getDest().buildClause(dest)));
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq AssignSimpleExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl source: getSource().typeSet()) {
      for (TypeDecl dest: getDest().typeSet()) {
        Optional<Formula> trace = source.verAssignConversionTo(dest, getSource());
        if (trace.isPresent()) {
          Formula sub = trace.get()
            .multiply(getSource().buildClause(source))
            .multiply(getDest().buildClause(dest));
          formula = formula.add(sub);
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq AssignMultiplicativeExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl source: getSource().typeSet()) {
      for (TypeDecl dest: getDest().typeSet()) {
        if (!source.isBoolean() && !dest.isBoolean()
            && source.isPrimitive() && dest.isPrimitive()) {
          formula = formula.add(getSource().buildFormula(source)
            .multiply(getDest().buildClause(dest)));
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq AssignPlusExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl source: getSource().typeSet()) {
      for (TypeDecl dest: getDest().typeSet()) {
        if (dest.isString() && !source.isVoid()) {
          formula = formula.add(
            getSource().buildFormula(source).multiply(
            getDest().buildClause(dest)));
        } else if (!source.isBoolean() && !dest.isBoolean()
            && source.isPrimitive() && dest.isPrimitive()) {
          formula = formula.add(getSource().buildFormula(source)
            .multiply(getDest().buildClause(dest)));
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq AssignMinusExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl source: getSource().typeSet()) {
      for (TypeDecl dest: getDest().typeSet()) {
        if (!source.isBoolean() && !dest.isBoolean()
            && source.isPrimitive() && dest.isPrimitive()) {
          formula = formula.add(getSource().buildFormula(source)
            .multiply(getDest().buildClause(dest)));
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq AssignShiftExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl source: getSource().typeSet()) {
      for (TypeDecl dest: getDest().typeSet()) {
        if (source.isIntegralType() && dest.isIntegralType()
            && source.isPrimitive() && dest.isPrimitive()) {
          formula = formula.add(getSource().buildFormula(source)
            .multiply(getDest().buildClause(dest)));
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq AssignBitwiseExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl source: getSource().typeSet()) {
      for (TypeDecl dest: getDest().typeSet()) {
        if ((source.isIntegralType() && dest.isIntegralType()) ||
            (source.isBoolean() && dest.isBoolean())) {
          if (source.isPrimitive() && dest.isPrimitive()) {
            formula = formula.add(getSource().buildFormula(source)
              .multiply(getDest().buildClause(dest)));
          }
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  /**
   *  Binary expressions
   */
  eq PlusExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl type: getOperand().typeSet()) {
      formula = formula.add(buildFormula(type.unaryNumericPromotion())
        .multiply(getOperand().buildClause(type)));
    }
    return Optional.of(formula);
  }

  eq MinusExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl type: getOperand().typeSet()) {
      formula = formula.add(buildFormula(type.unaryNumericPromotion())
        .multiply(getOperand().buildClause(type)));
    }
    return Optional.of(formula);
  }

  eq BitNotExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl type: getOperand().typeSet()) {
      formula = formula.add(buildFormula(type.unaryNumericPromotion())
        .multiply(getOperand().buildClause(type)));
    }
    return Optional.of(formula);
  }

  eq LogNotExpr.constraint() = Optional.of(buildFormula(typeBoolean()));

  eq MultiplicativeExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl left: getLeftOperand().typeSet()) {
      for (TypeDecl right: getRightOperand().typeSet()) {
        if (!left.binaryNumericPromotion(right).isUnknown()) {
          formula = formula.add(buildFormula(left.binaryNumericPromotion(right))
            .multiply(getRightOperand().buildClause(right))
            .multiply(getLeftOperand().buildClause(left)));
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq AdditiveExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl left: getLeftOperand().typeSet()) {
      for (TypeDecl right: getRightOperand().typeSet()) {
        if (!left.binaryNumericPromotion(right).isUnknown()) {
          formula = formula.add(buildFormula(left.binaryNumericPromotion(right))
            .multiply(getRightOperand().buildClause(right))
            .multiply(getLeftOperand().buildClause(left)));
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq AddExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl left: getLeftOperand().typeSet()) {
      for (TypeDecl right: getRightOperand().typeSet()) {
        if (!left.isString() && !right.isString()) {
          if (!left.binaryNumericPromotion(right).isUnknown()) {
            formula = formula.add(buildFormula(left.binaryNumericPromotion(right))
              .multiply(getRightOperand().buildClause(right))
              .multiply(getLeftOperand().buildClause(left)));
          }
        } else {
          if (!left.isVoid() && !right.isVoid()) {
            TypeDecl type = left.isString() ? left : right;
            formula = formula.add(buildFormula(type)
              .multiply(getRightOperand().buildClause(right))
              .multiply(getLeftOperand().buildClause(left)));
          }
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq ShiftExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl left: getLeftOperand().typeSet()) {
      formula = formula.add(buildFormula(left.unaryNumericPromotion())
        .multiply(getLeftOperand().buildClause(left)));
    }
    return Optional.of(formula);
  }

  eq RelationalExpr.constraint() = Optional.of(buildFormula(typeBoolean()));

  eq LogicalExpr.constraint() = Optional.of(buildFormula(typeBoolean()));

  eq EqualityExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl left: getLeftOperand().typeSet()) {
      for (TypeDecl right: getRightOperand().typeSet()) {
        if ((left.isNumericType() && right.isNumericType())
            || (left.isBoolean() && right.isBoolean())) {
          formula = formula.add(buildFormula(typeBoolean())
            .multiply(getLeftOperand().buildClause(left))
            .multiply(getRightOperand().buildClause(right)));
        } else if ((left.isReferenceType() || left.isNull())
            && (right.isReferenceType() || right.isNull())) {
          Optional<Formula> leftCast = left.verCastingConversionTo(right);
          Optional<Formula> rightCast = right.verCastingConversionTo(left);
          if (leftCast.isPresent() || rightCast.isPresent()) {
            Formula sub = buildFormula(typeBoolean())
              .multiply(getLeftOperand().buildClause(left))
              .multiply(getRightOperand().buildClause(right));
            if (leftCast.isPresent() && rightCast.isPresent()) {
              sub = sub.multiply(leftCast.get()).multiply(rightCast.get());
            } else if (leftCast.isPresent()) {
              sub = sub.multiply(leftCast.get());
            } else if (rightCast.isPresent()) {
              sub = sub.multiply(rightCast.get());
            }
            formula = formula.add(sub);
          }
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq BitwiseExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl left: getLeftOperand().typeSet()) {
      for (TypeDecl right: getRightOperand().typeSet()) {
        if (left.isIntegralType() && right.isIntegralType()) {
          if (!left.binaryNumericPromotion(right).isUnknown()) {
            formula = formula.add(buildFormula(left.binaryNumericPromotion(right))
              .multiply(getRightOperand().buildClause(right))
              .multiply(getLeftOperand().buildClause(left)));
          }
        } else if (left.isBoolean() && right.isBoolean()) {
          formula = formula.add(buildFormula(typeBoolean())
            .multiply(getRightOperand().buildClause(right))
            .multiply(getLeftOperand().buildClause(left)));
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq CastExpr.constraint() {
    Formula formula = new Formula();
    if (getTypeAccess().isTypeAccess()) {
      for (TypeDecl expr: getExpr().typeSet()) {
        for (TypeDecl type: getTypeAccess().typeSet()) {
          Optional<Formula> cast = expr.verCastingConversionTo(type);
          if (cast.isPresent()) {
            formula = formula.add(cast.get()
              .multiply(getExpr().buildClause(expr))
              .multiply(getTypeAccess().buildClause(type)));
          }
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  eq InstanceOfExpr.constraint() {
    Formula formula = new Formula();
    for (TypeDecl exprType: getExpr().typeSet()) {
      for (TypeDecl accessType: getTypeAccess().typeSet()) {
        Optional<Formula> trace = exprType.verInstanceOf(accessType);
        if (trace.isPresent()) {
          formula = formula.add(trace.get()
            .multiply(getExpr().buildFormula(exprType))
            .multiply(getTypeAccess().buildClause(accessType)));
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }

  syn lazy Optional<Formula> Stmt.constraint() = Optional.empty();

  eq ReturnStmt.constraint() {
    if (hasResult() && returnTypeAccess() != null) {
      return getResult().subtypingConstraint(returnTypeAccess());
    }
    return returnType().isVoid() ? Optional.of(new Formula()) : Optional.empty();
  }

  eq IfStmt.constraint() = Optional.of(getCondition().buildFormula(getCondition().typeBoolean()));

  syn lazy Optional<Formula> Declarator.constraint()
    = hasInit() ? getInit().subtypingConstraint(declarationType()) : Optional.of(new Formula());

  public Optional<Formula> Expr.subtypingConstraint(Access dest) {
    Formula formula = new Formula();
    for (TypeDecl sourceType: typeSet()) {
      for (TypeDecl destType: dest.typeSet()) {
        Optional<Formula> trace = sourceType.verAssignConversionTo(destType, this);
        if (trace.isPresent()) {
          Formula sub = trace.get().multiply(buildClause(sourceType));
          /** If the access belongs to the Java or compiled classes,
              then constraints are unnecessary **/
          if (dest.hostType().isUncompiled()) {
            sub = sub.multiply(dest.buildClause(destType));
          }
          formula = formula.add(sub);
        }
      }
    }
    return formula.size() > 0 ? Optional.of(formula) : Optional.empty();
  }


}